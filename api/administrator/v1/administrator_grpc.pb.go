// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: api/administrator/v1/administrator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdministratorClient is the client API for Administrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorClient interface {
	GetLoginAdministratorByUsername(ctx context.Context, in *GetLoginAdministratorByUsernameRequest, opts ...grpc.CallOption) (*GetLoginAdministratorByUsernameReply, error)
	VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordReply, error)
	GetAdministrator(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*GetAdministratorReply, error)
}

type administratorClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorClient(cc grpc.ClientConnInterface) AdministratorClient {
	return &administratorClient{cc}
}

func (c *administratorClient) GetLoginAdministratorByUsername(ctx context.Context, in *GetLoginAdministratorByUsernameRequest, opts ...grpc.CallOption) (*GetLoginAdministratorByUsernameReply, error) {
	out := new(GetLoginAdministratorByUsernameReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/GetLoginAdministratorByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordReply, error) {
	out := new(VerifyPasswordReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/VerifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) GetAdministrator(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*GetAdministratorReply, error) {
	out := new(GetAdministratorReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/GetAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorServer is the server API for Administrator service.
// All implementations must embed UnimplementedAdministratorServer
// for forward compatibility
type AdministratorServer interface {
	GetLoginAdministratorByUsername(context.Context, *GetLoginAdministratorByUsernameRequest) (*GetLoginAdministratorByUsernameReply, error)
	VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordReply, error)
	GetAdministrator(context.Context, *GetAdministratorRequest) (*GetAdministratorReply, error)
	mustEmbedUnimplementedAdministratorServer()
}

// UnimplementedAdministratorServer must be embedded to have forward compatible implementations.
type UnimplementedAdministratorServer struct {
}

func (UnimplementedAdministratorServer) GetLoginAdministratorByUsername(context.Context, *GetLoginAdministratorByUsernameRequest) (*GetLoginAdministratorByUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginAdministratorByUsername not implemented")
}
func (UnimplementedAdministratorServer) VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedAdministratorServer) GetAdministrator(context.Context, *GetAdministratorRequest) (*GetAdministratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrator not implemented")
}
func (UnimplementedAdministratorServer) mustEmbedUnimplementedAdministratorServer() {}

// UnsafeAdministratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorServer will
// result in compilation errors.
type UnsafeAdministratorServer interface {
	mustEmbedUnimplementedAdministratorServer()
}

func RegisterAdministratorServer(s grpc.ServiceRegistrar, srv AdministratorServer) {
	s.RegisterService(&Administrator_ServiceDesc, srv)
}

func _Administrator_GetLoginAdministratorByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginAdministratorByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).GetLoginAdministratorByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/GetLoginAdministratorByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).GetLoginAdministratorByUsername(ctx, req.(*GetLoginAdministratorByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/VerifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).VerifyPassword(ctx, req.(*VerifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_GetAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).GetAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/GetAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).GetAdministrator(ctx, req.(*GetAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Administrator_ServiceDesc is the grpc.ServiceDesc for Administrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Administrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.administrator.v1.Administrator",
	HandlerType: (*AdministratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginAdministratorByUsername",
			Handler:    _Administrator_GetLoginAdministratorByUsername_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _Administrator_VerifyPassword_Handler,
		},
		{
			MethodName: "GetAdministrator",
			Handler:    _Administrator_GetAdministrator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/administrator/v1/administrator.proto",
}
